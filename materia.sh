#!/bin/env bash
set -eo pipefail
#
REPO_DIR=$(cd $(dirname $0) && 'pwd')
THEMES_DIR=/usr/share/themes
GTK_VER=(3.0)
GS_VER=(3.18 3.24 3.26 3.28 3.30)
COLOR_VARIANTS=('' '-dark' '-light')
SIZE_VARIANTS=('' '-compact' '-standard')
SRCDIR=./src
if [ $? -ne 0 ]; then
    echo "ERROR[101]: Failed to locate 'src' dir. Please cd to materia dir."
    exit 101
fi
SASS_DIR=${SRCDIR}/_sass
SASS_GTK_DIR=${SASS_DIR}/gtk
SASS_GS_DIR=${SASS_DIR}/gnome-shell
GTK2_DIR=${SRCDIR}/gtk-2.0
GTK_DIR=${SRCDIR}/gtk
GS_DIR=${SRCDIR}/gnome-shell

usage() {
    echo -e "Usage: $0 --scheme <scheme name> [OPTIONS...]\
           \n     : $0 --color <light|dark> [OPTIONS...]\
    \n\nOPTIONS:\
    \n  -c, --color\tSpecify theme color variant (Mandatory option)\
    \n  -s, --size\tSpecify theme size variant (Default to all variants)\
    \n  -n, --name\tSpecify theme name (Default to Materia-color-size)\
    \n  -m, --scheme\tSpecify theme color scheme (see $0 -l)\
    \n  -d, --dest\tSpecify theme destination folder (Default to /usr/share/themes)\
    \n  -l, --list\tPrint a list of predefined color schemes\
    \n  -r, --render-assets\tRender assets\
    \n  -h, --help\tShow this help\
    \n  --fg \t\tChange foreground color\
    \n  --bg \t\tChange primary bg color (Main window)\
    \n  --bg2\t\tChange secondary bg color (menus,sidebars,fields..)\
    \n  --bg3\t\tChange ternary bg (tabs,toolbars, statusbars..)\
    \n  --tfg\t\tChange titlebar fg color\
    \n  --tbg\t\tChange titlebar bg color\
    \n  --tbi\t\tChange titlebar indicator color\
    \n  --tbh\t\tChange titlebar height in pixles (accepted values >= 32px)\
    \n  --sfg\t\tChange selection fg color\
    \n  --sbg\t\tChange selection bg color\
    \n  --pbg\t\tChange panel bg color\
    \n  --pfg\t\tChange panel fg color\
    \n  --gsel\t\tChanne gnome-shell selection fg color
    \n  --gse\t\tChanne Dash search entry box fg color
    \n  --gsep\t\tChanne Dash search sep color
    \n  --gsr\t\tChanne Dash search result fg color
    \n  --accent\tChange accent color (buttons,switches,checkboxes,..)\
    \n  --btn-fg\tChange buttons text color\
    \n  --btn2-fg\tChange action buttons text color(ex: rename button,..)\
    \n  --hl\tUse this when you have the selection color close/equal to the bg color\
    \n\nInstall original Materia color schemes\
    \n    ./materia.sh -c light -s compact\
    \n    ./materia.sh -c dark  -s compact\
    \n    ./materia.sh -c dark  -s standard\
    \n\nInstall theme from a pre-defined color scheme\
    \n    ./materia.sh --scheme gruvbox-light\
    \n    ./materia.sh --scheme gruvbox-dark\
    \n    ./materia.sh --scheme solarized-light\
    \n\nUse color scheme but with 1 or more different colors[see OPTIONS]\
    \n    ./materia.sh --scheme gruvbox-light --accent e040fb\
    \n    ./materia.sh --scheme gruvbox-light --accent e040fb --sbg ff0000\
    \n\nCreate your own custom theme\
    \nNOTES: - The --color [dark|light] is a mandatory option.\
    \n       - Any color not specified will be set to default or autogenerated.\
    \n       - For best result use '--color dark' for dark theme and '--color light' for light theme\
    \n\nI recommend to start with --bg and check the result if you dont like the autogenerated colors keep specifying options until you feel satisfied.\
    \n    ./materia --color dark --size compact --bg "#282828"\
    \n    ./materia --color dark --size compact --bg "#282828" --bg2 "#303030"\
    \n    ./materia --color dark --size compcat --bg "#282828" --bg2 "#303030" --fg "#FFFFFF" --accent "#e040fb" ...\
    \n\nAt the end dont forget to add '-r' option to generate new assets."

}
# Get gnome-shell version
latest_gs_ver=${GS_VER[@]: -1}
if which gnome-shell &>/dev/null; then
    gs_ver=$(gnome-shell --version | cut -d ' ' -f 3 | cut -d . -f 1,2)
    for ver in "${GS_VER[@]}"; do
        if (( $(echo "$ver >= $gs_ver"|bc) )); then
            gs_ver=${ver}
            break
        elif (( $(echo "$gs_ver > $latest_gs_ver"|bc) )); then
            gs_ver=${latest_gs_ver}
            break
        fi
    done
else
    gs_ver=3.18
fi
# Get GTK version
#gtk_ver=$(rpm -q gtk3 | grep -m1 "" | cut -d- -f 2| cut -d. -f 1,2)
tmpdir=$(mktemp -d -t)
cp -rf ${REPO_DIR}/* ${tmpdir}
cd ${tmpdir}
trap cleanup 0 1 2 15
cleanup() {
    rm -rf ${tmpdir}
    #echo "Finished cleaning up."
}
remove_materia () {
    if [ -d "${1}" ]; then
        rm -rf ${1}
    fi
}
# Set theme name
set_theme_name () {
    if [ "${flags[17]}" == "true" ] && [ "${flags[2]}" == "false" ]; then
        theme_name=Materia-${scheme_name}
    elif [ "${flags[2]}" == "false" ]; then
        theme_name=Materia$1$2
    elif [ "${flags[0]}" == "true" ] && [ "${flags[1]}" == "true" ] && [ "${flags[2]}" == "true" ]; then
        theme_name="${new_theme_name}"
    else
        theme_name="${new_theme_name}"$1$2
    fi
}
# Set specific theme variant(s) default to ALL
set_theme_variant () {
    # Install all variants
    if [ "${flags[0]}" == "false" ] && [ "${flags[1]}" == "false" ]; then
        theme_color=("${COLOR_VARIANTS[@]}")
        theme_size=("${SIZE_VARIANTS[@]}")
    # Install light/dark variants of all sizes
    elif [ "${flags[0]}" == "true" ] && [ "${flags[1]}" == "false" ]; then
        theme_color=${color}
        theme_size=("${SIZE_VARIANTS[@]:0:2}")
    # Install specific size with all color variants
    elif [ "${flags[0]}" == "false" ] && [ "${flags[1]}" == "true" ]; then
        theme_color=("${COLOR_VARIANTS[@]}")
        theme_size=${size}
    # Install specific size with all color variants
    elif [ "${flags[0]}" == "true" ] && [ "${flags[1]}" == "true" ] && [ ${size} == "-standard" ]; then
        theme_color=${color}
        theme_size=("${SIZE_VARIANTS[0]}")
    else
        theme_color="${color}"
        theme_size="${size}"
    fi
}
# Validate theme variant  
is_valid_variant () {
    if [[ ! " ${COLOR_VARIANTS[@]} " =~ " $1 " ]]; then
        echo "ERROR[200]: Unsupported color variant '"${1:1}"'."
        echo "Try '$0 --help' for more inforamtion."
        exit 200
    fi
}
# Validate theme size 
is_valid_size () {
    if [[ ! " ${SIZE_VARIANTS[@]} " =~ " $1 " ]]; then
        echo "ERROR[201]: Unsupported size variant '"${1:1}"'."
        echo "Try '$0 --help' for more inforamtion."
        exit 201
    fi
}
# Validate color: only accept color in hex format e.g. "#212121"
re_hexcolor='^#[0-9a-fA-F]{6}$'
is_valid_color () {
    if [ -z "${2}" ]; then
        echo "ERROR[202]: '${1} \"${2}\"', color cannot be empty."
        exit 202
    elif [[ ! "${2}" =~ $re_hexcolor ]]; then
        echo "ERROR[203]: '${1} \"${2}\"', color must be 6-digits hex format e.g. 212121."
        exit 203
    fi
}
# Validate color opacity
is_valid_opacity () {
    re_opacity='^0\.[2-9][0-9]?$'
    if [[ ! "$1" =~ $re_opacity ]] && [ "$1" != "1.0" ] ; then
        echo "ERROR[204]: background opacity must be between 0.2 and 1.0"
        exit 204
    fi
}
# Install index.theme 
install_index_theme () {
    cp -ur ${SRCDIR}/index.theme "${2}"
    sed -i "s/Materia\$/"${1}"/g" "${2}"/index.theme
    #echo "index.theme succussfully installed"
}
# Install gnome-shell theme 
install_gnome_shell () {
    gs_dst_dir="${3}/gnome-shell"
    gs_scss_file=${GS_DIR}/${gs_ver}/gnome-shell${1}${2}.scss
    install -d "${gs_dst_dir}"
    cp -ur ${GS_DIR}/{*.svg,*.png} ${gs_dst_dir}
    cp -ur ${GS_DIR}/{extensions,pad-osd.css} ${gs_dst_dir}
    [ "${1}" != "-dark" ] && \
    cp -ur ${GS_DIR}/assets ${gs_dst_dir} || \
    cp -ur ${GS_DIR}/assets-dark ${gs_dst_dir}/assets
    # Compile .scss files to .css files 
    sassc "${gs_scss_file}" "${gs_dst_dir}/gnome-shell.css"
    # Create a binary resource bundle from .gresource.xml gdm theme
    #glib-compile-resources --sourcedir=${gs_dst_dir} \
    #    --target=${gs_dst_dir}/gnome-shell-theme.gresource \
    #    ${GS_DIR}/gnome-shell-theme.gresource.xml
    #echo "Finished installing gnome-shell."
}
# Install GTK+ 2 theme
install_gtk2_theme () {
    install -d "${3}/gtk-2.0"
    local gtk2_hidpi=$(echo ${GTK2_HIDPI-False} | tr '[:upper:]' '[:lower:]')
    local hidpi_option=""
    [ "gtk2_hidpi" == "true" ] && \
    cp -ur ${GTK2_DIR}/main.rc.hidpi ${3}/gtk-2.0/main.rc || \
    cp -ur ${GTK2_DIR}/main.rc ${3}/gtk-2.0/main.rc
    cp -ur ${GTK2_DIR}/{apps,hacks}.rc ${3}/gtk-2.0
    cp -ur ${GTK2_DIR}/gtkrc${color} ${3}/gtk-2.0/gtkrc
    [ "${color}" == "-dark" ] && \
    cp -ur ${GTK2_DIR}/assets${color} ${3}/gtk-2.0/assets || \
    cp -ur ${GTK2_DIR}/assets ${3}/gtk-2.0
    #echo "Finished installing GTK+ 2 theme."
}
# Install GTK+ 3 theme 
install_gtk3_theme () {
    cp -ur ${GTK_DIR}/assets ${3}/gtk-assets
    install -d "${3}/gtk-${GTK_VER[0]}"
    ln -sf ../gtk-assets ${3}/gtk-${GTK_VER[0]}/assets
    sassc "${GTK_DIR}/${GTK_VER[0]}/gtk${1}${2}.scss" ${3}/gtk-${GTK_VER[0]}/gtk.css
    if [ "${color}" != "-dark" ]; then
        sassc "${GTK_DIR}/${GTK_VER[0]}/gtk-dark${2}.scss" ${3}/gtk-${GTK_VER[0]}/gtk-dark.css
    fi
    #echo "Finished installing GTK+ 3 theme."
}
# Installing Metacity theme
install_metacity_theme () {
    install -d "${3}/metacity-1"
    cp -ur ${SRCDIR}/metacity-1/assets ${3}/metacity-1 
    if [ "${color}" != "-light" ]; then
        cp -ur ${SRCDIR}/metacity-1/metacity-theme-{2,3}.xml ${3}/metacity-1 
    else
        cp -ur ${SRCDIR}/metacity-1/metacity-theme-2.xml ${3}/metacity-1/metacity-theme-2.xml 
        cp -ur ${SRCDIR}/metacity-1/metacity-theme-3.xml ${3}/metacity-1/metacity-theme-3.xml 
    fi
}
# Installing Unity theme
install_unity_theme () {
    install -d "${3}/unity"
    cp -ur ${SRCDIR}/unity/*.{svg,png,json} ${3}/unity
    if [ "${color}" != "-light" ]; then
        cp -ur ${SRCDIR}/unity/assets ${3}/unity 
    else
        cp -urT ${SRCDIR}/unity/assets${color} ${3}/unity/assets 
    fi
}
# Installing Xfwm theme
install_xfwm_theme () {
    install -d ${3}/xfwm4
    cp -ur ${SRCDIR}/xfwm4/{*.svg,themerc} ${3}/xfwm4
    if [ "${color}" != "-light" ]; then
        cp -ur ${SRCDIR}/xfwm4/assets ${3}/xfwm4 
    else
        cp -urT ${SRCDIR}/xfwm4/assets${color} ${3}/xfwm4/assets 
    fi
}
install_assets() {
    if [ "${flags[20]}" == "true" ] && [ "${is_rendered}" == "false" ]; then
        change_assets_color
        if [ -f ${tmpdir}/progressbar.sh ]; then
            source ${tmpdir}/progressbar.sh 
            progress_bar "${tmpdir}/materia-render-assets.sh all ${color}" "Rendering assets: "
            is_rendered=true
        else
            ${tmpdir}/materia-render-assets.sh all ${color} 2>/dev/null 
            is_rendered=true
        fi
    fi
    if [ "${flags[20]}" == "true" ]; then
        cp -rf ${tmpdir}/src/gtk/new_assets/* $theme_dir/gtk-assets
        cp -rf ${tmpdir}/src/gtk-2.0/new_assets/* $theme_dir/gtk-2.0/assets
    fi
}
# Main function
install_materia () {
    for size in "${theme_size[@]}"; do
        set_theme_name ${color} ${size}
        theme_dir=${theme_dst_dir:-${THEMES_DIR}}/${theme_name}
        remove_materia "${theme_dir}" 
        install -d "${theme_dir}"
        cp -ur ${SRCDIR}/../COPYING ${theme_dir}
        printf "%s\n" "Installing '$theme_name' to '${theme_dst_dir:-${THEMES_DIR}}' directory." 
        install_index_theme "${theme_name}" "${theme_dir}"
        install_gtk2_theme "${color}" "${size}" "${theme_dir}"
        install_gtk3_theme "${color}" "${size}" "${theme_dir}"
        install_gnome_shell "${color}" "${size}" "${theme_dir}"
        install_metacity_theme "${color}" "${size}" "${theme_dir}"
        install_unity_theme "${color}" "${size}" "${theme_dir}"
        install_xfwm_theme "${color}" "${size}" "${theme_dir}"
        install_assets
    done
}
# Change theme colors
change_theme_colors() {
    local colors_scss_file=${SASS_DIR}/_colors.scss
    local gtkrc_file=${GTK2_DIR}/gtkrc${color}
    local gs_common_file=${SASS_GS_DIR}/_common-${gs_ver}.scss
    local gtk_common_file=${SASS_GTK_DIR}/_common-3.20.scss


    # Recolor GTK+3 theme
    [ "${color}" == "-dark" ] && auto_color='lighten' || auto_color='darken'
    if [ "${flags[3]}" == "true" ]; then
        sed -i -e "s/\(\\\$fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.87)/g" \
               -e "s/\(\\\$button_fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.62)/g" \
               -e "s/\(\\\$secondary_fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.54)/g" \
               -e "s/\(\\\$hint_fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.45)/g" \
               -e "s/\(\\\$disabled_fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.45)/g" \
               -e "s/\(\\\$disabled_secondary_fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.3)/g" \
               -e "s/\(\\\$track_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.3)/g" \
               -e "s/\(\\\$divider_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.1)/g"  ${colors_scss_file}
        if [ "${color}" == "-light" ]; then
            sed -i "s/\(\\\$dark_fg_color: \).[^;]*/\1rgba(${fg_color}, 0.87)/g" ${colors_scss_file}
        else
            sed -i "s/\(\\\$light_fg_color: \).[^;]*/\1${fg_color}/g" ${colors_scss_file}
        fi
    fi
    if [ "${flags[8]}" == "true" ]; then
        sed -i -e "s/\(\\\$titlebar_fg_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.87)/g" \
               -e "s/\(\\\$titlebar_secondary_fg_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.7)/g" \
               -e "s/\(\\\$titlebar_hint_fg_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.45)/g" \
               -e "s/\(\\\$titlebar_disabled_fg_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.45)/g" \
               -e "s/\(\\\$titlebar_disabled_secondary_fg_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.3)/g" \
               -e "s/\(\\\$titlebar_track_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.3)/g" \
               -e "s/\(\\\$titlebar_divider_color:\ *\?\).[^;]*/\1rgba(${tb_fg_color}, 0.12)/g" ${colors_scss_file}
    fi
    if [ "${flags[13]}" == "true" ]; then
        sed -i "s/\(\\\$button_fg_color:\ *\?\).[^;]*/\1rgba(${fg_color}, 0.62)/g" ${colors_scss_file} 
    fi
    if [ "${flags[10]}" == "true" ]; then
        sed -i -e "s/\(\\\$inverse_fg_color:\ *\?\).[^;]*/\1${sfg_color}/g" \
               -e "s/\(\\\$inverse_secondary_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" \
               -e "s/\(\\\$inverse_hint_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" \
               -e "s/\(\\\$inverse_disabled_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" \
               -e "s/\(\\\$inverse_disabled_secondary_fg_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" \
               -e "s/\(\\\$inverse_track_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" \
               -e "s/\(\\\$inverse_divider_color:.[^(]*(\).[^,]*\(.[^;]*\)/\1${sfg_color}\2/g" ${colors_scss_file}
    fi
    if [ "${flags[18]}" == "true" ]; then
        sed -i "/\.panel-button/{n;n;n;n;s/\(color: \).[^;]*/\1${pfg_color}/}" ${gs_common_file}
    else
        sed -i "/\.panel-button/{n;n;n;n;s/\(color: \).[^;]*/\1\\\$titlebar_fg_color/}" ${gs_common_file}
    fi
    if [ "${flags[19]}" == "true" ]; then
        sed -i "s/\(\\\$panel_bg_color:\ *\?\).[^;]*/\1rgba(${pbg_color}, 1.0)/" ${colors_scss_file}
    else
        sed -i "s/\(\\\$panel_bg_color:\ *\?\).[^;]*/\1rgba(\\\$titlebar_bg_color, 0.8)/" ${colors_scss_file}

    fi
    if [ "${flags[4]}" == "true" ]; then
        sed -i -e "s/\(\\\$base_color:\ *\?\).[^;]*/\1rgba(${base_color}, 1.0)/g" \
            -e "s/\(\\\$button_bg_color:\ *\?\).[^;]*/\1rgba($auto_color($base_color, 2%), 1.0)/g" ${colors_scss_file} 
    fi
    if [ "${flags[5]}" == "true" ]; then
        sed -i -e "s/\(\\\$popup_bg_color:\ *\?\).[^;]*/\1rgba(${popup_bg_color}, 1.0)/g" \
               -e "s/\(\\\$alt_base_color:\ *\?\).[^;]*/\1rgba(${popup_bg_color}, 1.0)/g" ${colors_scss_file}
    elif [ "${flags[4]}" == "true" ]; then
        sed -i -e "s/\(\\\$popup_bg_color:\ *\?\).[^;]*/\1rgba($auto_color(${base_color}, 3%), 1.0)/g" \
               -e "s/\(\\\$alt_base_color:\ *\?\).[^;]*/\1rgba($auto_color(${base_color}, 3%), 1.0)/g" ${colors_scss_file}
    fi
    if [ "${flags[6]}" == "true" ]; then
        sed -i -e "s/\(\\\$bg_color:\ *\?\).[^;]*/\1rgba(${bg_color}, 1.0)/g" \
               -e "s/\(\\\$darker_bg_color:\ *\?\).[^;]*/\1rgba(${bg_color}, 1.0)/g" \
               -e "s/\(\\\$gdm_bg_color:\ *\?\).[^;]*/\1rgba(${bg_color}, 1.0)/g" \
               -e "s/\(\\\$alt_lighter_bg_color:\ *\?\).[^;]*/\1rgba(${bg_color}, 1.0)/g" ${colors_scss_file}
    elif [ "${flags[4]}" == "true" ]; then
        sed -i -e "s/\(\\\$bg_color:\ *\?\)[^;]*/\1rgba($auto_color(${base_color}, 4%), 1.0)/g" \
               -e "s/\(\\\$darker_bg_color:\ *\?\)[^;]*/\1rgba($auto_color(${base_color}, 4%), 1.0)/g" \
               -e "s/\(\\\$gdm_bg_color:\ *\?\)[^;]*/\1rgba($auto_color(${base_color}, 6%), 1.0)/g" \
               -e "s/\(\\\$alt_lighter_bg_color:\ *\?\).[^;]*/\1rgba($auto_color(${base_color}, 5%), 1.0)/g" ${colors_scss_file}
    fi
    if [ "${flags[7]}" == "true" ]; then
        sed -i -e "s/\(\\\$titlebar_bg_color:\ *\?\).[^;]*/\1rgba(${tb_bg_color}, 1.0)/g" \
               -e "s/\(\\\$alt_titlebar_bg_color:\ *\?\).[^;]*/\1rgba(${tb_bg_color}, 1.0)/g" ${colors_scss_file} 
    fi
    if [ "${flags[11]}" == "true" ]; then
        sed -i -e "s/\(\\\$primary_color:\ *\?\).[^;]*/\1rgba(${sbg_color}, 1.0)/g" \
            -e "s/\(\\\$alt_primary_color:\ *\?\).[^;]*/\1rgba(\\\$primary_color, 0.6)/g" ${colors_scss_file}
    fi
    if [ "${flags[12]}" == "true" ]; then
        sed -i "s/\(\\\$secondary_color:\ *\?\).[^;]*/\1rgba(${accent_color}, 1.0)/g" ${colors_scss_file}
        sed -i "s/\(\\\$disabled_secondary_color:\ *\?\).[^;]*/\1rgba(${accent_color}, 0.5)/g" ${colors_scss_file}
    fi
    if [ "${flags[9]}" == "true" ]; then
        sed -i "s/\(\\\$titlebar_indicator_color:\).[^;]*/\1${titlebar_indicator_color}/g" ${colors_scss_file}
    else
        sed -i "s/\(\\\$titlebar_indicator_color:\).[^;]*/\1\$primary_color/g" ${colors_scss_file}
    fi
    if [ "${flags[14]}" == "true" ]; then
        sed -i "/\&\.\#{\\\$b_type}/{n;n;s/\\\$inverse_fg_color/${btn2_fg_color}/g}" ${gtk_common_file}
        sed -i "/\\\$t\ ==\ checked\ {/{n;n;s/\\\$inverse_fg_color/${btn2_fg_color}/g}" ${SASS_GTK_DIR}/_drawing-3.20.scss
        sed -i "/&:selected\ {/{n;s/\\\$inverse_fg_color/${sfg_color}/g}" ${gs_common_file}
    fi
    if [ "${flags[15]}" == "true" ]; then
        sed -i -e "/\.menu,/{n;n;n;n;n;s/\\\$base_color/rgba(\$base_color, ${bg_opacity})/g}" ${SASS_GTK_DIR}/_common-${gs_ver}.scss
        sed -i -e "s/\(\\\$bg_color:.*, \).[^)]*/\1${bg_opacity}/g" \
               -e "s/\(\\\$base_color:.*, \).[^)]*/\1${base_opacity}/g" \
               -e "s/\(\\\$alt_base_color:.*, \).[^)]*/\1${alt_base_opacity}/g" \
               -e "s/\(\\\$popup_bg_color:.*, \).[^)]*/\1${lighter_bg_opacity}/g" \
               -e "s/\(\\\$darker_bg_color:.*, \).[^)]*/\1${darker_bg_opacity}/g" \
               -e "s/\(\\\$titlebar_bg_color:.*, \).[^)]*/\1${titlebar_bg_opacity}/g" \
               -e "s/\(\\\$primary_color:.*, \).[^)]*/\1${base_opacity}/g"  ${colors_scss_file}
               #-e "s/\(\\\$alt_primary_color:., \).[^)]*/\1${base_opacity}/g" \
               #-e "s/\(\\\$panel_bg_color:.*, \).[^)]*/\1${titlebar_bg_opacity}/g" ${colors_scss_file}

    fi
# change primary->accent_color primay->inverse_fg_color
if [ "${flags[21]}" == "true" ] || [ "${flags[21]}" == "1" ]; then
    sed -i "s/\(\\\$titlebar_indicator_color:\).[^;]*/\1\$inverse_fg_color/g" ${colors_scss_file}
    sed -i "s/\(.*&:checked . box-shadow:.[^$]*\).[^;]*/\1\$inverse_fg_color/g" ${gtk_common_file}
    sed -i "/\\\$t\ ==\ checked\ {/{n;s/primary_color/secondary_color/g}" ${SASS_GTK_DIR}/_drawing-3.20.scss
    #sed -i "/&:selected\ {/{n;n;s/primary_color/secondary_color/g}" ${SASS_GS_DIR}/_common-$gs_ver.scss
    sed -i "s/\(\ *-barlevel-active-background-color: \).[^;]*/\1\$secondary_color/g" ${gs_common_file}
    #progressbar for a transparent selection bg
    sed -i -e "/&.progressbar/{n;s/primary_color/inverse_fg_color/}" \
           -e "/&.trough\ {/{n;s/primary_color/inverse_fg_color/}" \
           -e "s/\(trough\ { background-color: rgba(\$\).[^,]*\(.*}\)/\1secondary_color\2/" \
           -e "s/\(progress\ { background-color: \$\).[^;]*\(.*}\)/\1secondary_color\2/" ${gtk_common_file}
fi
if [ "${flags[22]}" == "true" ]; then
    sed -i "/^\%titlebar/{n;n;n;s/\(min-height: \).[^;]*/\1${tb_height}/}" ${gtk_common_file}
fi

# Recolor GTK+2 theme
if [ "${color}" == "" ] || [ "${color}" == "-dark" ]; then
    sed  -i -e "s/\(.*text_color:\).[^n]*\(..base_color:\).[^\"]*\"/\1${fg_color:-#FFFFFF}\2${base_color:-#303030}\"/g" \
            -e "s/\(.*fg_color:\).[^n]*\(..bg_color:\).[^\"]*\"/\1${fg_color:-#FFFFFF}\2${popup_bg_color:-#212121}\"/g" \
            -e "s/\(.*selected_fg_color:\).[^n]*\(..selected_bg_color:\).[^\"]*\"/\1${sfg_color:-#FFFFFF}\2${sbg_color:-#338DD6}\"/g" \
            -e "s/\(.*titlebar_fg_color:\).[^n]*\(..titlebar_bg_color:\).[^\"]*\"/\1${tb_fg_color:-#FFFFFF}\2${tb_bg_color:-#303030}\"/g" \
            -e "s/\(.*link_color:\).[^n]*\(..visited_link_color:\).[^\"]*\"/\1\#1E88E5\2\#E040FB\"/g" \
            -e "s/\(.*tooltip_fg_color:\).[^n]*\(..tooltip_bg_color:\).[^\"]*\"/\1\#FFFFFF\2\#424242\"/g" $gtkrc_file
else 
    sed  -i -e "s/\(.*text_color:\).[^n]*\(..base_color:\).[^\"]*\"/\1${fg_color:-#212121}\2${base_color:-#FFFFFF}\"/g" \
            -e "s/\(.*fg_color:\).[^n]*\(..bg_color:\).[^\"]*\"/\1${fg_color:-#212121}\2${popup_bg_color:-#EEEEEE}\"/g" \
            -e "s/\(.*selected_fg_color:\).[^n]*\(..selected_bg_color:\).[^\"]*\"/\1${sfg_color:-#FFFFFF}\2${sbg_color:-#338DD6}\"/g" \
            -e "s/\(.*titlebar_fg_color:\).[^n]*\(..titlebar_bg_color:\).[^\"]*\"/\1${tfg_color:-#212121}\2${tbg_color:-#E0E0E0}\"/g" \
            -e "s/\(.*link_color:\).[^n]*\(..visited_link_color:\).[^\"]*\"/\1\#1E88E5\2\#E040FB\"/g" \
            -e "s/\(.*tooltip_fg_color:\).[^n]*\(..tooltip_bg_color:\).[^\"]*\"/\1\#FFFFFF\2\#424242\"/g" $gtkrc_file
fi

# Gnome Dash board and top panel auto coloring based on them variant
# gnome-shell replace inverse-fg-color with secondary-color
if [ "${flags[23]}" == "true" ]; then
    sed -i "s/\\\$inverse_fg_color/${gsel}/" ${gs_common_file}
       #-e "/\.app-view-control\ {/{n;n;n;s/inverse_secondary_fg_color/green_600/}" ${gs_common_file}
else
    sed -i "s/\\\$inverse_fg_color/\$secondary_color/" ${gs_common_file}
fi
if [ "${flags[24]}" == "true" ]; then
    sed -i -e "/\.search-entry\ {/{n;n;n;n;s/\\\$inverse_hint_fg_color/${gse}/}" \
           -e "/\.search-entry\ {/{n;n;n;n;n;n;n;n;n;s/\\\$inverse_fg_color/rgba(${gse}, 0.6)/}" \
           -e "/\.search-entry\ {/{n;n;n;n;n;n;n;n;n;n;n;n;s/\\\$inverse_fg_color/${gse}/}" \
           -e "s/\(\.search-entry-icon { icon.[^$]*\).[^;]*\(.*}\)/\1rgba(${gse}, 0.6)\2/" \
           -e "s/\(\.search-entry-icon { color: \).[^;]*\(.*}\)/\1${gse}\2/" ${gs_common_file}
else
   sed -i -e "/\.search-entry\ {/{n;n;n;n;s/inverse_hint_fg_color/green_600/}" \
          -e "/\.search-entry\ {/{n;n;n;n;n;n;n;n;n;s/\\\$inverse_fg_color/rgba(\$white, 0.8)/}" \
          -e "/\.search-entry\ {/{n;n;n;n;n;n;n;n;n;n;n;n;s/inverse_fg_color/green_500/}" \
          -e "s/\(\.search-entry-icon { icon.[^$]*\).[^;]*\(.*}\)/\1\$secondary_color\2/" \
          -e "s/\(\.search-entry-icon { color.[^$]*\).[^;]*\(.*}\)/\1\$green_500\2/" ${gs_common_file}

fi
if [ "${flags[25]}" == "true" ]; then
    sed -i -e "s/\(\.list-search-result-description.[^$]*\).[^;]*\(.*}\)/\1${gsr}\2/" \
           -e "s/\(\.list-search-provider-details.[^$]*\).[^;]*\(.*}\)/\1rgba(${gsr}, 0.6)\2/" ${gs_common_file}
else
    sed -i -e "s/\(\.list-search-result-description.[^$]*\).[^;]*\(.*}\)/\1\$grey_500\2/" \
           -e "s/\(\.list-search-provider-details.[^$]*\).[^;]*\(.*}\)/\1rgba(\$white, 0.8)\2/" ${gs_common_file}
fi
if [ "${flags[26]}" == "true" ]; then
    sed -i "s/\(\.search-section-separator.[^$]*\).[^;]*\(.*}\)/\1${gsep}\2/" ${gs_common_file}
else
    sed -i "s/\(\.search-section-separator.[^$]*\).[^;]*\(.*}\)/\1\$grey_800\2/" ${gs_common_file}

fi

#-e "/\.app-view-control\ {/{n;n;n;n;n;s/secondary_color/green_500/}" ${gs_common_file}
#-e "/^\ \+\&:checked\ {/{n;s/inverse_fg_color/secondary_color/}" ${gs_common_file}
#-e "s/\(\.list-search-result-title.[^$]*\).[^;]*\(.*}\)/\1\$secondary_color\2/" \
#-e "/\.app-well-app-running-dot\ {/{n;n;s/inverse_fg_color/secondary_color/}" \
#-e "/\%icon_tile\ {/{n;s/\\\$inverse_fg_color/rgba(\$white, 0.8)/}" \

# Some Tweaks
if [ "${flags[3]}" == "-light" ]; then
    fg_default="#FFFFFF"
else
    fg_default="#000000"
fi
sed -i "s/\(\\\$border_color:\ *\?\).[^;]*/\1rgba(${fg_color:-${fg_default}}, 0.14)/" ${colors_scss_file}
sed -i "s/\(\\\$alt_border_color:\ *\?\).[^;]*/\1rgba(${fg_color:-${fg_default}}, 0.36)/" ${colors_scss_file}
sed -i "/^\%titlebar/{n;n;n;n;n;s/\(box-shadow: \).[^;]*/\1none/}" ${gtk_common_file}
sed -i "/^headerbar /{n;n;n;n;s/...separator,/separator,/}" ${gtk_common_file}
sed -i "/^headerbar /{n;n;n;n;n;n;s/\(margin-top: \).[^;]*/\10px/}" ${gtk_common_file}
sed -i "/^headerbar /{n;n;n;n;n;n;n;s/\(margin-bottom: \).[^;]*/\10px/}" ${gtk_common_file}
#sed -i "/\ *margin-bottom: 0px;/a \\tbackground-color:\ transparent;" ${gtk_common_file}
sed -i "s/\(\ *\)\(margin-bottom: 0px;\)/\1\2\n\1background-color:\ transparent;/" ${gtk_common_file}
}
change_theme_opacity () {
    opacity=${1}
    bg_opacity=$(echo $opacity - 0 | bc)    #tabbs,toolbar,...
    base_opacity=$(echo $opacity - 0.25 | bc) #main windows
    alt_base_opacity=$(echo $opacity - 0 | bc)
    lighter_bg_opacity=$(echo $opacity - 0 | bc) #sidebar,combox
    darker_bg_opacity=$(echo $opacity - 0 | bc)
    if [ $(bc<<<"$opacity < 0.9") -eq 1 ]; then
        titlebar_bg_opacity=$(echo $opacity + 0.08 | bc)
    else
        titlebar_bg_opacity=$(echo $opacity - 0 | bc)
    fi
}
# List of pre-defined color schemes
color_schemes_list() {
    sed -n '/scheme-template/,$p' $SRCDIR/../colorschemes
}
change_color_schemes() {
    local scheme_name=${1}
    scheme=($(grep "^${scheme_name}:" colorschemes | cut -d: -f 2)) || true
    if [ -z "${scheme}" ]; then
        echo "ERROR[205]: Unsupported color scheme, Try '$0 --scheme-list' to list all supported schemes."
        exit 205
    fi
    if [ ${#scheme[@]} -gt 14 ]; then
        echo ${#scheme[@]}
        echo "ERROR[206]: Unsupported color scheme, Try '$0 --scheme-list' to list all supported schemes."
        exit 206
    fi
    color=-${scheme[0]};                    flags[0]=true
    size=-${scheme[1]};                     flags[1]=true
    fg_color=${scheme[2]};                  flags[3]=true
    base_color=${scheme[3]};                flags[4]=true
    popup_bg_color=${scheme[4]};            flags[5]=true
    bg_color=${scheme[5]};                  flags[6]=true
    sbg_color=${scheme[6]};                 flags[11]=true
    sfg_color=${scheme[7]};                 flags[10]=true
    tb_bg_color=${scheme[8]};               flags[7]=true
    tb_fg_color=${scheme[9]};               flags[8]=true
    accent_color=${scheme[10]};             flags[12]=true
    if [ "${scheme[11]}" != "default" ]; then
        btn2_fg_color=${scheme[11]};        flags[14]=true
    fi
    if [ "${scheme[12]}"  != "0" ]; then
                                            flags[21]=true
    fi
    tb_height=${scheme[13]};                flags[22]=true
    # Default Dash board color scheme
    gsel=${scheme[10]}                      flags[23]=true
    gse=${scheme[10]}                       flags[24]=true
    #gsr=${scheme[10]}                       flags[25]=true
}
# Change asset color
change_asset_color() {
    if [ "${color}" == "-dark" ]; then
        sed -i "/\"${1}\"/{n;s/\(.*stop-color=\"\).[^\"]*/\1${2}/g}" ${SRCDIR}/gtk-2.0/assets${color}.svg
    else
        sed -i "/\"${1}\"/{n;s/\(.*stop-color=\"\).[^\"]*/\1${2}/g}" ${SRCDIR}/gtk-2.0/assets.svg
    fi
    if [ "${3}" != "gtk2" ]; then
        sed -i "/\"${1}\"/{n;s/\(.*stop-color=\"\).[^\"]*/\1${2}/g}" ${SRCDIR}/gtk/assets.svg 
    fi
}
# Change assets colors
change_assets_color() {
    if [ "${flags[3]}" == "true" ]; then
        if [ "${color}" == "-light" ]; then
            change_asset_color 'color-fg' $fg_color
            change_asset_color 'color-fg-secondary' $fg_color
            change_asset_color 'color-fg-secondary-disabled' $fg_color change_asset_color 'color-divider' $fg_color
            change_asset_color 'color-fg-disabled' $fg_color
        else
            change_asset_color 'color-fg' $fg_color 'gtk2'
            change_asset_color 'color-fg-disabled' $fg_color 'gtk2'
            change_asset_color 'color-fg-secondary' $fg_color 'gtk2'
            change_asset_color 'color-fg-secondary-disabled' $fg_color 'gtk2'
            change_asset_color 'color-divider' $fg_color 'gtk2'

            change_asset_color 'color-fg-dark' $fg_color 
            change_asset_color 'color-fg-secondary-dark' $fg_color
            change_asset_color 'color-fg-secondary-disabled-dark' $fg_color
            change_asset_color 'color-divider-dark' $fg_color
        fi
    fi
    if [ "${flags[4]}" == "true" ]; then
        [ "${color}" == "-light" ] && change_asset_color 'color-base' $base_color || \
        change_asset_color 'color_base_dark' $base_color
    fi
    if [ "${flags[5]}" == "true" ]; then
        change_asset_color 'color-base-alt' $popup_bg_color
        [ "${color}" == "-light" ] && change_asset_color 'color-bg-lighter' $popup_bg_color || \
        change_asset_color 'color-bg-lighter-dark' $popup_bg_color
    else
        change_asset_color 'color-base-alt' $popup_bg_color
        auto_color=$(sed -n '/^messagedialog\.background/{n;s/.*#\(.*\);/#\1/p}' $theme_dir/gtk-3.22/gtk.css)
        [ "${color}" == "-light" ] && change_asset_color 'color-bg-lighter' $auto_color || \
        change_asset_color 'color-bg-lighter-dark' $auto_color
    fi
    if [ "${flags[6]}" == "true" ]; then
        [ "${color}" == "-light" ] && change_asset_color 'color-bg' $bg_color || \
        change_asset_color 'color-bg-dark' $bg_color
    else
        auto_color=$(sed -n 's/^.define-color.*theme_bg_color.*\#\(.*\);/#\1/p' $theme_dir/gtk-3.22/gtk.css)
        [ "${color}" == "-light" ] && change_asset_color 'color-bg' $auto_color || \
        change_asset_color 'color-bg-dark' $auto_bg_color
    fi
    if [ "${flags[12]}" == "true" ]; then
        change_asset_color 'color-secondary' $accent_color
        change_asset_color 'color-secondary-disabled' $accent_color
    fi
    if [ "${flags[11]}" == "true" ]; then
        change_asset_color 'color-primary' $sbg_color
    fi
}
# Array of flags that control the flow of the installation
is_rendered=false
flags=(false false false false false \
       false false false false false \
       false false false false false \
       false false false false false \
       false false false false false \
       false false false)

OPTS=$(getopt -o c:s:n:m:d:a:hvlro: -l color:,size:,name:,\
    fg:,fg2:,bg:,bg2:,bg3:,tbg:,tfg:,tbi:,tbh:,sbg:,sfg:,hl:,\
    btn-fg:,btn2-fg:,accent:,pfg:,pbg:,dest:,version,help,list,\
    scheme:,render-assets,gsel:,gse:,gsep:,gsr:,dash-auto, -n $0 -- "$@")

if [ $? -ne 0 ]; then
    echo "ERROR[102]: Failed to parse arguments, Try '$0 --help' for more informations"
    exit 102
fi

while [ $# -gt 0 ] && [ "$1" != "--" ]; do
    case "$1" in
        -c|--color)
            color="-${2}"
            is_valid_variant "${color}" 
            flags[0]=true
            shift 2
            ;;
        -s|--size)
            size="-${2}"
            is_valid_size "${size}" 
            flags[1]=true
            shift 2
            ;;
        -n|--name)
            new_theme_name="${2}"
            flags[2]=true
            shift 2
            ;;
        --fg) 
            is_valid_color "${1}" "#${2}"
            fg_color="#${2}"
            flags[3]=true
            shift 2
            ;;
        --bg)
            is_valid_color "${1}" "#${2}"
            base_color="#${2}"
            flags[4]=true
            shift 2
            ;;
        --bg2)
            is_valid_color "${1}" "#${2}"
            popup_bg_color="#${2}"
            flags[5]=true
            shift 2
            ;;
        --bg3)
            is_valid_color "${1}" "#${2}"
            bg_color="#${2}"
            flags[6]=true
            shift 2
            ;;
        --tbg)
            is_valid_color "${1}" "#${2}"
            tb_bg_color="#${2}"
            flags[7]=true
            shift 2
            ;;
        --tfg)
            is_valid_color "${1}" "#${2}"
            tb_fg_color="#${2}"
            flags[8]=true
            shift 2
            ;;
        --tbi)# titlebar indicator color
            is_valid_color "${1}" "#${2}"
            titlebar_indicator_color="#${2}"
            flags[9]=true
            shift 2
            ;;
        --sfg)
            is_valid_color "${1}" "#${2}"
            sfg_color="#${2}"
            flags[10]=true
            shift 2
            ;;
        --sbg)
            is_valid_color "${1}" "#${2}"
            sbg_color="#${2}"
            flags[11]=true
            shift 2
            ;;
        -a|--accent)
            is_valid_color "${1}" "#${2}"
            accent_color="#${2}"
            flags[12]=true
            shift 2
            ;;
        --btn-fg)
            is_valid_color "${1}" "#${2}"
            btn_fg_color="#${2}"
            flags[13]=true
            shift 2
            ;;
        --btn2-fg)
            # Suggested and Destructive Action buttons
            is_valid_color "${1}" "#${2}"
            btn2_fg_color="#${2}"
            flags[14]=true
            shift 2
            ;;
        --pfg)
            is_valid_color "${1}" "#${2}"
            pfg_color="#${2}"
            flags[18]=true
            shift 2
            ;;

        --pbg)
            is_valid_color "${1}" "#${2}"
            pbg_color="#${2}"
            flags[19]=true
            shift 2
            ;;
        -o|--opacity)
            is_valid_opacity ${2}
            change_theme_opacity ${2}
            flags[15]=true
            shift 2
            ;;
        -d|--dest)
            theme_dst_dir="${2}"
            if [ ! -d "${theme_dst_dir}" ]; then
                echo "ERROR[103]: destination directory does not exist."
                exit 103
            fi
            flags[16]=true
            shift 2
            ;;
        -m|--scheme)
            scheme_name="${2}"
            change_color_schemes $scheme_name
            flags[17]=true
            shift 2
            ;;
        -r|--render-assets)
            flags[20]=true
            shift 1
            ;;
        --hl)
            flags[21]=${2}
            shift 2
            ;;
        --tbh|--titlebar-hieght)
            tb_height="${2}"
            flags[22]=true
            shift 2
            ;;
        --gsel)
            gsel="#${2}"
            flags[23]=true
            shift 2
            ;;
        --gse)
            gse="#${2}"
            flags[24]=true
            shift 2
            ;;
        --gsr)
            gsr="#${2}"
            flags[25]=true
            shift 2
            ;;
        --gsep)
            gsep="#${2}"
            flags[26]=true
            shift 2
            ;;
        --dash-auto)
            flags[27]=true
            shift 1
            ;;
        -l|--list)
            color_schemes_list
            exit 0
            ;;
        -v|--version)
            echo "materia 2.0"
            exit 0
            ;;
        -h|--help)
            usage
            shift 1
            exit 0
            ;;
        *)
            echo "ERROR[104]: Unrecognized option '$1'."
            echo "Try '$0 --help' for more information"
            exit 104
            ;;
    esac
done
if [ "${flags[16]}" == "false" ] && [ $(id -u) != 0 ]; then
    echo "ERROR[105]: Please run as root." 
    exit 105
fi
#if [ "${flags[0]}" == "false" ]; then
#    echo "ERROR[106]: Please specify color variant [light|dark]."
#    echo "Try '$0 --help' for more information"
#    exit 106
#fi
change_theme_colors
set_theme_variant
install_materia
echo "Installation finished successfully."
exit 0
